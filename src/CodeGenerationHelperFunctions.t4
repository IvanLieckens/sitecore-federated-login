<#+
public static string GetCleanName(string name)
{
    return name.Replace(" ", string.Empty).Replace("_", string.Empty);
}

public static string GenerateTemplatesClass(SerializedTreeDataSource sitecoreDataSource, string templatePathRestriction)
{
	StringBuilder builder = new StringBuilder();

	GenerateHeader(builder);
	GenerateClass(builder, sitecoreDataSource, templatePathRestriction);

	return builder.ToString();
}

private static void GenerateHeader(StringBuilder builder)
{
    builder.AppendLine(@"#pragma warning disable 1591
#pragma warning disable 0108
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by T4.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using Sitecore.Data;
");
}

private static void GenerateClass(StringBuilder builder, SerializedTreeDataSource sitecoreDataSource, string templatePathRestriction)
{
	builder.AppendLine("namespace " + System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint"));
	builder.AppendLine("{");
    builder.AppendLine("    [CLSCompliant(false)]");
	builder.AppendLine("    public static class Templates");
	builder.AppendLine("    {");
	foreach (TemplateItem template in sitecoreDataSource.Templates.Where(t => t.Path.Contains(templatePathRestriction)))
	{
		GenerateTemplateStruct(builder, "        ", template);
	}
	builder.AppendLine("    }");
	builder.AppendLine("}");
}

private static void GenerateTemplateStruct(StringBuilder builder, string indent, TemplateItem template)
{
	builder.AppendLine(indent + "public static class " + GetCleanName(template.Name));
	builder.AppendLine(indent + "{");
	builder.AppendLine(indent + "    public static readonly ID Id = new ID(\"" + template.ID.ToString() + "\");");
	if(template.Sections.Any(s => s.OwnFields.Count > 0))
	{
		builder.AppendLine(indent + "");
		GenerateFieldsStruct(builder, indent + "    ", template);
	}
	builder.AppendLine(indent + "}");
}

private static void GenerateFieldsStruct(StringBuilder builder, string indent, TemplateItem template)
{
	builder.AppendLine(indent + "public struct Fields");
	builder.AppendLine(indent + "{");
	foreach(TemplateSectionItem section in template.Sections)
	{
        foreach(TemplateFieldItem field in section.OwnFields)
		{
			builder.AppendLine(indent + "    public static readonly ID " + GetCleanName(field.Name) + " = new ID(\"" + field.ID.ToString() +"\");");
			builder.AppendLine(indent + "    public const string " + GetCleanName(field.Name) + "FieldName = \"" + field.Name +"\";");
		}
	}
	builder.AppendLine(indent + "}");
}
#>